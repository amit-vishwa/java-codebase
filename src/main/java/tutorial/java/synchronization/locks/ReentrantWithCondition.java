package tutorial.java.synchronization.locks;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

/**
 * Refer: https://www.geeksforgeeks.org/reentrant-lock-java/
 *
 * ReentrantLock() Example With Condition :
 * We will explore the utilization of the Condition object to pause a thread using the await() method, and the signal() method to
 * resume the thread that was paused using that condition.
 *
 * Explanation of the below Program:
 * In the provided code, I ensure that even threads utilize an even Condition object to wait using the await() method, and odd
 * threads use an odd condition to wait using await() methods. When the shared resource (t) is even, I release the even thread
 * using the signal() method because the last printed value is an odd value generated by the odd thread. Likewise, when the
 * shared resource(t) is odd, I release the odd thread using the signal() method because the last printed value is an even value
 * produced by the even thread.
 *
 * Important Point
 * - The thread utilizing the condition to await with await() should avoid signaling through the same condition using the signal()
 * method. Ex: even thread uses even condition to wait with await() and same thread should not do signal with signal() of even
 * condition.
 * - The await() and signal() are similar to wait() and notify() in synchronized block
 * */
public class ReentrantWithCondition {

    public static void main(String[] args) {
        EvenOddThreadCondition obj = new EvenOddThreadCondition(5);
        Thread even = new Thread(obj, "even");
        Thread odd = new Thread(obj, "odd");
        even.start();
        odd.start();
    }

}

class EvenOddThreadCondition extends Thread {
    ReentrantLock lock = new ReentrantLock();

    Condition even = lock.newCondition();
    Condition odd = lock.newCondition();
    int t;
    EvenOddThreadCondition(int t) {
        this.t=t;
    }

    EvenOddThreadCondition() {
        this.t=0;
    }
    int MAX_COUNT = 10;

    public void run() {
        while (t <= MAX_COUNT) {
            lock.lock();
            try {
                if (t % 2 == 1 && Thread.currentThread().getName().equals("even")) {
                    even.await();
                } else if (t % 2 == 0 && Thread.currentThread().getName().equals("odd")) {
                    odd.await();
                } else {
                    System.out.println(Thread.currentThread().getName() + " Thread " + t);
                    t+=1;
                    if (t % 2 == 0) {
                        even.signal();
                    } else if (t % 2 == 1) {
                        odd.signal();
                    }
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            } finally {
                lock.unlock();
            }
        }
    }

}