
Refer: https://www.geeksforgeeks.org/spring-beanfactory/?ref=lbp

Spring – BeanFactory
The first and foremost thing when we talk about Spring is dependency injection which is possible because Spring is
a container and behaves as a factory of Beans. Just like the  BeanFactory interface is the simplest container
providing an advanced configuration mechanism to instantiate, configure, and manage the life cycle of beans.

Beans are Java objects that are configured at run-time by Spring IoC Container. BeanFactory represents a basic IoC
container which is a parent interface of ApplicationContext. BeanFactory uses Beans and their dependencies metadata
to create and configure them at run-time. BeanFactory loads the bean definitions and dependency amongst the beans
based on a configuration file (XML) or the beans can be directly returned when required using Java Configuration.
There are other types of configuration files like LDAP, RDMS, properties files, etc. BeanFactory does not support
Annotation-based configuration whereas ApplicationContext does.

The program flow is something like this:
First of all, the Bean factory reads the XML configuration file and as per the specifications defined in it, it
creates the bean of the student POJO.
Then the student reference asks for the student object from the object factory.
Then finally, the spring object factory hands over the spring bean (student) to its reference. Here, note that the
bean returned by the object factory is of “Object” type, so we have to typecast it into our desired bean.